%% This BibTeX bibliography file was created using BibDesk.
%% http://www.cs.ucsd.edu/~mmccrack/bibdesk.html


%% Created for neil at 2002-12-09 14:04:13 +1300 

@inproceedings{jones2018practice,
  title={The Practice of a Compositional Functional Programming Language},
  author={Jones, Timothy and Homer, Michael},
  booktitle={Asian Symposium on Programming Languages and Systems},
  pages={166--177},
  year={2018},
  organization={Springer}
}

@online{FunctionalProgrammingHaskellWiki2019,
  title = {Functional Programming - {{HaskellWiki}}},
  url = {https://wiki.haskell.org/Functional_programming},
  urldate = {2019-06-11},
  date = {2019-06-11},
}

@inproceedings{pestov2010factor,
  title={Factor: A dynamic stack-based programming language},
  author={Pestov, Sviatoslav and Ehrenberg, Daniel and Groff, Joe},
  booktitle={Acm Sigplan Notices},
  volume={45},
  number={12},
  pages={43--58},
  year={2010},
  organization={ACM}
}

@book{thompson2011haskell,
  title={Haskell: the craft of functional programming},
  author={Thompson, Simon},
  volume={2},
  year={2011},
  publisher={Addison-Wesley}
}

@inproceedings{matsakis2014rust,
  title={The rust language},
  author={Matsakis, Nicholas D and Klock II, Felix S},
  booktitle={ACM SIGAda Ada Letters},
  volume={34},
  number={3},
  pages={103--104},
  year={2014},
  organization={ACM}
}

@inproceedings{aktolgaPatternMatchingStrategies2005,
  title = {Pattern {{Matching Strategies}} for {{Peephole Optimisation}}},
  abstract = {Peephole optimisation is a simple and effective optimisation technique used in conventional compilers. In classical peephole optimisers, optimisation rules are commonly applied through string pattern matching by means of regular expressions. This string-based approach to matching has proven to be very effective, but it is just the syntax of the assembly code input that is processed and its meaning gets lost. This dissertation explores alternatives to this classical approach: pattern matching for peephole optimisation is viewed as a procedure that is composed of a rule application strategy and a specific pattern matching strategy for matching within a rule. Two ‘generic’ matching strategies are developed in an OOP context to perform qualitatively better and more intelligent matching by utilising the meaning of the code. The results show that generic matching can yield better and even faster results than matching with mere regular expressions.},
  date = {2005},
  keywords = {Assembly language,Compiler,Mathematical optimization,Pattern matching,Peephole optimization,Regular expression,Rule (guideline)},
  author = {Aktolga, Elif},
  file = {C:\\Users\\zva\\Zotero\\storage\\XPHLZY3C\\Aktolga - 2005 - Pattern Matching Strategies for Peephole Optimisat.pdf}
}

@inreference{PeepholeOptimization2019,
  langid = {english},
  title = {Peephole Optimization},
  url = {https://en.wikipedia.org/w/index.php?title=Peephole_optimization&oldid=900779904},
  abstract = {Peephole optimization is an optimization technique performed on a small set of instructions in a segment of assembly-language code, known as the peephole or window. Peephole optimization involves changes to individual assembly-language instructions, such as eliminating redundant code, replacing slower instructions with faster ones, optimizing flow control, and performing algebraic simplification.},
  booktitle = {Wikipedia},
  urldate = {2019-06-12},
  date = {2019-06-07T14:53:35Z},
  file = {C:\\Users\\zva\\Zotero\\storage\\A5IGJ8JY\\index.html},
  note = {Page Version ID: 900779904}
}

@article{bansalAutomaticGenerationPeepholea,
  langid = {english},
  title = {Automatic {{Generation}} of {{Peephole Superoptimizers}}},
  abstract = {Peephole optimizers are typically constructed using human-written pattern matching rules, an approach that requires expertise and time, as well as being less than systematic at exploiting all opportunities for optimization. We explore fully automatic construction of peephole optimizers using brute force superoptimization. While the optimizations discovered by our automatic system may be less general than human-written counterparts, our approach has the potential to automatically learn a database of thousands to millions of optimizations, in contrast to the hundreds found in current peephole optimizers. We show experimentally that our optimizer is able to exploit performance opportunities not found by existing compilers; in particular, we show speedups from 1.7 to a factor of 10 on some compute intensive kernels over a conventional optimizing compiler.},
  pages = {10},
  author = {Bansal, Sorav and Aiken, Alex},
  file = {C:\\Users\\zva\\Zotero\\storage\\TQ8XF2IA\\Bansal and Aiken - Automatic Generation of Peephole Superoptimizers.pdf}
}

@online{WhatForthProgramming2019,
  langid = {american},
  title = {What Is the {{Forth}} Programming Language?},
  url = {https://www.forth.com/forth/},
  abstract = {The Forth language's creators and foremost proponents answer, "What is Forth?" The Forth programming language - in use for more than four decades.},
  journaltitle = {FORTH, Inc},
  urldate = {2019-06-12},
  date = {2019-06-12},
  file = {C:\\Users\\zva\\Zotero\\storage\\FV7F6WIP\\forth.html}
}

@article{auler2011superoptimization,
  title={Superoptimization for LLVM IR},
  author={Auler, Rafael},
  journal={Google Summer of Code},
  year={2011}
}

@inproceedings{singh2017ap,
  title={AP: artificial programming},
  author={Singh, Rishabh and Kohli, Pushmeet},
  booktitle={2nd Summit on Advances in Programming Languages (SNAPL 2017)},
  year={2017},
  organization={Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik}
}

@article{lopes2018future,
  title={Future Directions for Optimizing Compilers},
  author={Lopes, Nuno P and Regehr, John},
  journal={arXiv preprint arXiv:1809.02161},
  year={2018}
}